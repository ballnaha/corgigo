const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createAdminUser() {
  try {
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Admin User...');

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admin
    const adminData = {
      email: 'admin@corgigo.com',
      password: 'admin123456', // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å hash
      firstName: 'Admin',
      lastName: 'CorgiGo',
      primaryRole: 'ADMIN',
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ admin user ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingAdmin = await prisma.user.findUnique({
      where: { email: adminData.email }
    });

    if (existingAdmin) {
      console.log('‚ö†Ô∏è  Admin user ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß:', adminData.email);
      return;
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(adminData.password, 12);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á admin user
    const adminUser = await prisma.user.create({
      data: {
        email: adminData.email,
        password: hashedPassword,
        firstName: adminData.firstName,
        lastName: adminData.lastName,
        primaryRole: adminData.primaryRole,
        status: 'ACTIVE',
      }
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° ADMIN role ‡πÉ‡∏ô UserRoles table
    await prisma.userRoles.create({
      data: {
        userId: adminUser.id,
        role: 'ADMIN',
      }
    });

    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    console.log('üìß Email:', adminData.email);
    console.log('üîë Password:', adminData.password);
    console.log('üë§ Name:', `${adminData.firstName} ${adminData.lastName}`);
    console.log('üè∑Ô∏è  Role:', adminData.primaryRole);
    console.log('üÜî User ID:', adminUser.id);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Admin User:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function
createAdminUser(); 