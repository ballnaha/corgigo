import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'
import { getThailandNow } from '../src/lib/timezone'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Starting database seeding...')

  // Clear existing data
  console.log('üóëÔ∏è Clearing existing data...')
  await prisma.orderItem.deleteMany()
  await prisma.order.deleteMany()
  await prisma.menuItem.deleteMany()
  await prisma.category.deleteMany()
  await prisma.restaurant.deleteMany()
  await prisma.customer.deleteMany()
  await prisma.rider.deleteMany()
  await prisma.userRoles.deleteMany()
  await prisma.user.deleteMany()

  // Create Admin User
  console.log('üë®‚Äçüíº Creating admin user...')
  const adminPassword = await bcrypt.hash('admin123', 12)
  const adminUser = await prisma.user.create({
    data: {
      email: 'admin@corgigo.com',
      password: adminPassword,
      firstName: 'Admin',
      lastName: 'CorgiGo',
      primaryRole: 'ADMIN',
      status: 'ACTIVE',
      createdAt: new Date(),
      updatedAt: new Date(),
    }
  })

  await prisma.userRoles.create({
    data: {
      userId: adminUser.id,
      role: 'ADMIN',
      createdAt: new Date(),
      updatedAt: new Date(),
    }
  })

  // Create Restaurant Users and Restaurants
  console.log('üè™ Creating restaurants...')
  const restaurantData = [
    {
      email: 'lacasa@restaurant.com',
      name: 'La Casa Restaurant',
      description: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
      address: '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡πÄ‡∏Ç‡∏ï‡∏ß‡∏±‡∏í‡∏ô‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
      phone: '02-123-4567',
      rating: 4.9,
    },
    {
      email: 'barbaras@cafe.com',
      name: 'Barbaras Caf√©',
      description: '‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡∏™‡∏∏‡∏î‡∏ä‡∏¥‡∏Ñ‡πÉ‡∏ô‡πÉ‡∏à‡∏Å‡∏•‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡πÅ‡∏ü‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°',
      address: '456 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏µ‡∏•‡∏° ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10500',
      phone: '02-234-5678',
      rating: 4.7,
    },
    {
      email: 'sushizen@restaurant.com',
      name: 'Sushi Zen',
      description: '‡∏£‡πâ‡∏≤‡∏ô‡∏ã‡∏π‡∏ä‡∏¥‡πÅ‡∏ó‡πâ‡∏à‡∏≤‡∏Å‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÄ‡∏ä‡∏ü‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡πÅ‡∏ó‡πâ',
      address: '789 ‡∏ñ‡∏ô‡∏ô‡πÄ‡∏û‡∏•‡∏¥‡∏ô‡∏à‡∏¥‡∏ï ‡πÄ‡∏Ç‡∏ï‡∏õ‡∏ó‡∏∏‡∏°‡∏ß‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10330',
      phone: '02-345-6789',
      rating: 4.8,
    },
    {
      email: 'thaiheritage@restaurant.com',
      name: 'Thai Heritage',
      description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ï‡πâ‡∏ô‡∏ï‡∏≥‡∏£‡∏±‡∏ö ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô',
      address: '321 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏≤‡∏ä‡∏î‡∏≥‡∏£‡∏¥ ‡πÄ‡∏Ç‡∏ï‡∏õ‡∏ó‡∏∏‡∏°‡∏ß‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10330',
      phone: '02-456-7890',
      rating: 4.6,
    },
    {
      email: 'marios@pizzeria.com',
      name: 'Mario\'s Pizzeria',
      description: '‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ó‡πâ ‡πÄ‡∏ï‡∏≤‡∏ñ‡πà‡∏≤‡∏ô‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡∏û‡∏≤‡∏™‡∏ï‡πâ‡∏≤‡πÇ‡∏Æ‡∏°‡πÄ‡∏°‡∏î',
      address: '654 ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏≠‡∏á‡∏´‡∏•‡πà‡∏≠ ‡πÄ‡∏Ç‡∏ï‡∏ß‡∏±‡∏í‡∏ô‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
      phone: '02-567-8901',
      rating: 4.5,
    },
    {
      email: 'sweetdreams@bakery.com',
      name: 'Sweet Dreams Bakery',
      description: '‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏¢‡∏∏‡πÇ‡∏£‡∏õ ‡πÄ‡∏Ñ‡πâ‡∏Å‡∏™‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏û‡∏¥‡πÄ‡∏®‡∏©',
      address: '987 ‡∏ñ‡∏ô‡∏ô‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 4 ‡πÄ‡∏Ç‡∏ï‡∏õ‡∏ó‡∏∏‡∏°‡∏ß‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10330',
      phone: '02-678-9012',
      rating: 4.4,
    }
  ]

  const restaurants = []
  
  for (const restaurant of restaurantData) {
    const password = await bcrypt.hash('restaurant123', 12)
    
    const user = await prisma.user.create({
      data: {
        email: restaurant.email,
        password: password,
        firstName: restaurant.name.split(' ')[0],
        lastName: restaurant.name.split(' ').slice(1).join(' '),
        primaryRole: 'RESTAURANT',
        status: 'ACTIVE',
      }
    })

    await prisma.userRoles.create({
      data: {
        userId: user.id,
        role: 'RESTAURANT'
      }
    })

    const restaurantRecord = await prisma.restaurant.create({
      data: {
        userId: user.id,
        name: restaurant.name,
        description: restaurant.description,
        address: restaurant.address,
        phone: restaurant.phone,
        rating: restaurant.rating,
        isOpen: true,
        openTime: '08:00',
        closeTime: '22:00',
        status: 'APPROVED',
        approvedAt: getThailandNow(),
        approvedBy: adminUser.id,
      }
    })

    restaurants.push(restaurantRecord)
    console.log(`‚úÖ Created restaurant: ${restaurant.name}`)
  }

  // Create Categories and Menu Items for each restaurant
  console.log('üìÇ Creating categories and menu items...')
  
  const menuData = [
    // La Casa Restaurant
    {
      restaurantIndex: 0,
      categories: [
        {
          name: 'Seafood',
          description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà',
          items: [
            { name: 'Grilled Salmon', description: '‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô‡∏¢‡πà‡∏≤‡∏á‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏°‡∏î‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏£‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô', price: 350 },
            { name: 'Seafood Platter', description: '‡∏à‡∏≤‡∏ô‡∏£‡∏ß‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•‡∏™‡∏î', price: 650 },
            { name: 'Fish & Chips', description: '‡∏õ‡∏•‡∏≤‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏°‡∏±‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á‡∏ó‡∏≠‡∏î', price: 220 },
          ]
        },
        {
          name: 'Fast Food',
          description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏î‡πà‡∏ß‡∏ô',
          items: [
            { name: 'Classic Burger', description: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÅ‡∏ó‡πâ 100%', price: 180 },
          ]
        }
      ]
    },
    // Barbaras Caf√©
    {
      restaurantIndex: 1,
      categories: [
        {
          name: 'Drinks',
          description: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡πÅ‡∏ü',
          items: [
            { name: 'Espresso', description: '‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏≠‡∏™‡πÄ‡∏õ‡∏£‡∏™‡πÇ‡∏ã‡πà‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô', price: 80 },
            { name: 'Cappuccino', description: '‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà‡∏´‡∏≠‡∏°‡∏ô‡∏∏‡πà‡∏°', price: 120 },
          ]
        },
        {
          name: 'Dessert',
          description: '‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡πâ‡∏Å',
          items: [
            { name: 'Chocolate Cake', description: '‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô', price: 150 },
            { name: 'Tiramisu', description: '‡∏ó‡∏¥‡∏£‡∏≤‡∏°‡∏¥‡∏™‡∏∏‡∏ï‡πâ‡∏ô‡∏ï‡∏≥‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô', price: 180 },
          ]
        }
      ]
    },
    // Sushi Zen
    {
      restaurantIndex: 2,
      categories: [
        {
          name: 'Japanese',
          description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡πÅ‡∏ó‡πâ',
          items: [
            { name: 'Salmon Sashimi', description: '‡∏ã‡∏≤‡∏ä‡∏¥‡∏°‡∏¥‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà', price: 280 },
            { name: 'California Roll', description: '‡πÅ‡∏Ñ‡∏•‡∏¥‡∏ü‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏µ‡∏¢‡πÇ‡∏£‡∏•‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Ñ', price: 220 },
            { name: 'Ramen Tonkotsu', description: '‡∏£‡∏≤‡πÄ‡∏°‡∏ô‡∏ô‡πâ‡∏≥‡∏ã‡∏∏‡∏õ‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏´‡∏°‡∏π', price: 350 },
            { name: 'Chirashi Don', description: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏•‡∏≤‡∏î‡∏¥‡∏ö‡∏£‡∏ß‡∏°', price: 450 },
          ]
        }
      ]
    },
    // Thai Heritage
    {
      restaurantIndex: 3,
      categories: [
        {
          name: 'Thai Food',
          description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ï‡πâ‡∏ô‡∏ï‡∏≥‡∏£‡∏±‡∏ö',
          items: [
            { name: 'Pad Thai', description: '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏ï‡πâ‡∏ô‡∏ï‡∏≥‡∏£‡∏±‡∏ö', price: 120 },
            { name: 'Green Curry', description: '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà', price: 150 },
            { name: 'Tom Yum Goong', description: '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡∏Ç‡πâ‡∏ô', price: 180 },
            { name: 'Massaman Curry', description: '‡πÅ‡∏Å‡∏á‡∏°‡∏±‡∏™‡∏°‡∏±‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠', price: 200 },
          ]
        }
      ]
    },
    // Mario's Pizzeria
    {
      restaurantIndex: 4,
      categories: [
        {
          name: 'Italian',
          description: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ó‡πâ',
          items: [
            { name: 'Margherita Pizza', description: '‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏°‡∏≤‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡∏¥‡∏ï‡πâ‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Ñ', price: 320 },
            { name: 'Carbonara Pasta', description: '‡∏û‡∏≤‡∏™‡∏ï‡πâ‡∏≤‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡∏ô‡∏≤‡∏£‡πà‡∏≤‡∏Ñ‡∏£‡∏µ‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô', price: 280 },
            { name: 'Pepperoni Pizza', description: '‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡πÄ‡∏õ‡∏õ‡πÄ‡∏õ‡∏≠‡πÇ‡∏£‡∏ô‡∏µ‡πà', price: 380 },
            { name: 'Bolognese Pasta', description: '‡∏û‡∏≤‡∏™‡∏ï‡πâ‡∏≤‡πÇ‡∏ö‡πÇ‡∏•‡πÄ‡∏ô‡∏™', price: 300 },
          ]
        }
      ]
    },
    // Sweet Dreams Bakery
    {
      restaurantIndex: 5,
      categories: [
        {
          name: 'Dessert',
          description: '‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà',
          items: [
            { name: 'Croissant', description: '‡∏Ñ‡∏£‡∏±‡∏ß‡∏ã‡∏≠‡∏á‡∏ï‡πå‡πÄ‡∏ô‡∏¢‡∏™‡∏î‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™', price: 60 },
            { name: 'Cheesecake', description: '‡∏ä‡∏µ‡∏™‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ô‡∏¥‡∏ß‡∏¢‡∏≠‡∏£‡πå‡∏Å', price: 180 },
            { name: 'Macarons', description: '‡∏°‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏Å‡∏™‡∏µ 6 ‡∏ä‡∏¥‡πâ‡∏ô', price: 240 },
            { name: 'Red Velvet Cake', description: '‡πÄ‡∏Ñ‡πâ‡∏Å‡πÄ‡∏£‡∏î‡πÄ‡∏ß‡∏•‡πÄ‡∏ß‡∏ó', price: 200 },
          ]
        }
      ]
    }
  ]

  for (const restaurantMenu of menuData) {
    const restaurant = restaurants[restaurantMenu.restaurantIndex]
    
    for (const categoryData of restaurantMenu.categories) {
      const category = await prisma.category.create({
        data: {
          restaurantId: restaurant.id,
          name: categoryData.name,
          description: categoryData.description,
        }
      })

      for (const item of categoryData.items) {
        await prisma.menuItem.create({
          data: {
            name: item.name,
            description: item.description,
            price: item.price,
            isAvailable: true,
            restaurantId: restaurant.id,
            categoryId: category.id,
          }
        })
      }

      console.log(`‚úÖ Created category "${categoryData.name}" with ${categoryData.items.length} items for ${restaurant.name}`)
    }
  }

  // Create Customer Users
  console.log('üë• Creating customer users...')
  const customerData = [
    {
      email: 'john@customer.com',
      firstName: 'John',
      lastName: 'Doe',
      phone: '0812345678'
    },
    {
      email: 'jane@customer.com',
      firstName: 'Jane',
      lastName: 'Smith',
      phone: '0823456789'
    },
    {
      email: 'david@customer.com',
      firstName: 'David',
      lastName: 'Wilson',
      phone: '0834567890'
    }
  ]

  for (const customerInfo of customerData) {
    const password = await bcrypt.hash('customer123', 12)
    
    const user = await prisma.user.create({
      data: {
        email: customerInfo.email,
        password: password,
        firstName: customerInfo.firstName,
        lastName: customerInfo.lastName,
        phone: customerInfo.phone,
        primaryRole: 'CUSTOMER',
        status: 'ACTIVE',
      }
    })

    await prisma.userRoles.create({
      data: {
        userId: user.id,
        role: 'CUSTOMER'
      }
    })

    await prisma.customer.create({
      data: {
        userId: user.id,
      }
    })

    console.log(`‚úÖ Created customer: ${customerInfo.firstName} ${customerInfo.lastName}`)
  }

  // Create Rider Users
  console.log('üõµ Creating riders...')
  const riderData = [
    {
      email: 'rider1@corgigo.com',
      firstName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
      lastName: '‡πÉ‡∏à‡∏î‡∏µ',
      phone: '0845678901',
      licenseNumber: 'ABC123456',
      vehicleType: '‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå',
      vehicleNumber: '1‡∏Å‡∏ó-1234'
    },
    {
      email: 'rider2@corgigo.com',
      firstName: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á',
      lastName: '‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏ß',
      phone: '0856789012',
      licenseNumber: 'DEF789012',
      vehicleType: '‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå',
      vehicleNumber: '2‡∏Å‡∏ó-5678'
    }
  ]

  for (const riderInfo of riderData) {
    const password = await bcrypt.hash('rider123', 12)
    
    const user = await prisma.user.create({
      data: {
        email: riderInfo.email,
        password: password,
        firstName: riderInfo.firstName,
        lastName: riderInfo.lastName,
        phone: riderInfo.phone,
        primaryRole: 'RIDER',
        status: 'ACTIVE',
      }
    })

    await prisma.userRoles.create({
      data: {
        userId: user.id,
        role: 'RIDER'
      }
    })

    await prisma.rider.create({
      data: {
        userId: user.id,
        licenseNumber: riderInfo.licenseNumber,
        vehicleType: riderInfo.vehicleType,
        vehicleNumber: riderInfo.vehicleNumber,
        status: 'ONLINE',
        rating: 4.8,
        totalRides: Math.floor(Math.random() * 100) + 50,
      }
    })

    console.log(`‚úÖ Created rider: ${riderInfo.firstName} ${riderInfo.lastName}`)
  }

  console.log('üéâ Database seeding completed successfully!')
  console.log('\nüìä Summary:')
  console.log(`- Restaurants: ${restaurants.length}`)
  console.log(`- Categories: ${menuData.reduce((total, restaurant) => total + restaurant.categories.length, 0)}`)
  console.log(`- Menu Items: ${menuData.reduce((total, restaurant) => total + restaurant.categories.reduce((catTotal, cat) => catTotal + cat.items.length, 0), 0)}`)
  console.log(`- Customers: ${customerData.length}`)
  console.log(`- Riders: ${riderData.length}`)
  console.log('\nüîë Login Credentials:')
  console.log('Admin: admin@corgigo.com / admin123')
  console.log('Restaurant: lacasa@restaurant.com / restaurant123')
  console.log('Customer: john@customer.com / customer123')
  console.log('Rider: rider1@corgigo.com / rider123')
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  }) 