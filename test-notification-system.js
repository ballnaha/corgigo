const io = require('socket.io-client');

// Test notification system
async function testNotificationSystem() {
  console.log('üîî Testing CorgiGo Notification System...\n');

  // Create multiple socket connections for different user roles
  const customerSocket = io('https://corgigo.treetelu.com', {
    path: '/api/socket',
    addTrailingSlash: false,
  });

  const restaurantSocket = io('https://corgigo.treetelu.com', {
    path: '/api/socket',
    addTrailingSlash: false,
  });

  const riderSocket = io('https://corgigo.treetelu.com', {
    path: '/api/socket',
    addTrailingSlash: false,
  });

  // Test users
  const testUsers = {
    customer: {
      id: 'customer-test-001',
      name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      email: 'customer@test.com',
      role: 'CUSTOMER'
    },
    restaurant: {
      id: 'restaurant-test-001',
      name: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      email: 'restaurant@test.com',
      role: 'RESTAURANT',
      restaurantId: 'rest-001'
    },
    rider: {
      id: 'rider-test-001',
      name: '‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      email: 'rider@test.com',
      role: 'RIDER'
    }
  };

  // Connection handlers
  customerSocket.on('connect', () => {
    console.log('‚úÖ Customer connected');
    customerSocket.emit('authenticate', testUsers.customer);
  });

  restaurantSocket.on('connect', () => {
    console.log('‚úÖ Restaurant connected');
    restaurantSocket.emit('authenticate', testUsers.restaurant);
  });

  riderSocket.on('connect', () => {
    console.log('‚úÖ Rider connected');
    riderSocket.emit('authenticate', testUsers.rider);
  });

  // Authentication handlers
  customerSocket.on('authenticated', (data) => {
    console.log('üîê Customer authenticated:', data.user.name);
  });

  restaurantSocket.on('authenticated', (data) => {
    console.log('üîê Restaurant authenticated:', data.user.name);
  });

  riderSocket.on('authenticated', (data) => {
    console.log('üîê Rider authenticated:', data.user.name);
  });

  // Notification event handlers
  customerSocket.on('orderStatusUpdate', (data) => {
    console.log('üì± Customer received order status update:', data);
  });

  restaurantSocket.on('newOrder', (data) => {
    console.log('üçΩÔ∏è Restaurant received new order:', data);
  });

  restaurantSocket.on('orderCreated', (data) => {
    console.log('üìã Restaurant received order created notification:', data);
  });

  riderSocket.on('orderAvailable', (data) => {
    console.log('üèçÔ∏è Rider received order available:', data);
  });

  riderSocket.on('deliveryRequest', (data) => {
    console.log('üì¶ Rider received delivery request:', data);
  });

  // Wait for connections
  await new Promise(resolve => setTimeout(resolve, 2000));

  console.log('\nüß™ Starting notification tests...\n');

  // Test 1: Send order notification
  console.log('Test 1: Sending new order notification...');
  customerSocket.emit('sendOrderNotification', {
    orderId: 'ORDER-' + Date.now(),
    customerName: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    customerPhone: '081-234-5678',
    restaurantId: 'rest-001',
    restaurantName: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    totalAmount: 299,
    items: [
      { name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á', quantity: 1, price: 149 },
      { name: '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', quantity: 1, price: 150 }
    ],
    deliveryAddress: '123 ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
    notes: '‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ú‡∏±‡∏Å‡∏ä‡∏µ'
  });

  await new Promise(resolve => setTimeout(resolve, 1000));

  // Test 2: Send order status update
  console.log('Test 2: Sending order status update...');
  restaurantSocket.emit('updateOrderStatus', {
    orderId: 'ORDER-' + (Date.now() - 1000),
    status: 'CONFIRMED',
    message: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß',
    estimatedTime: 30
  });

  await new Promise(resolve => setTimeout(resolve, 1000));

  // Test 3: Send rider notification
  console.log('Test 3: Sending rider notification...');
  restaurantSocket.emit('sendRiderNotification', {
    orderId: 'ORDER-' + (Date.now() - 2000),
    restaurantId: 'rest-001',
    restaurantName: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    restaurantAddress: '456 ‡∏ñ‡∏ô‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
    deliveryAddress: '123 ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
    customerName: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    customerPhone: '081-234-5678',
    totalAmount: 299,
    deliveryFee: 25,
    distance: 2.5
  });

  await new Promise(resolve => setTimeout(resolve, 1000));

  // Test 4: Send test messages
  console.log('Test 4: Sending test messages...');
  customerSocket.emit('sendTestMessage', {
    message: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤!',
    targetRole: 'ALL'
  });

  await new Promise(resolve => setTimeout(resolve, 500));

  restaurantSocket.emit('sendTestMessage', {
    message: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£!',
    targetRole: 'CUSTOMER'
  });

  await new Promise(resolve => setTimeout(resolve, 500));

  riderSocket.emit('sendTestMessage', {
    message: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå!',
    targetRole: 'RESTAURANT'
  });

  console.log('\n‚úÖ All notification tests completed!');
  console.log('\nüìä Test Summary:');
  console.log('- ‚úÖ Socket connections established');
  console.log('- ‚úÖ User authentication successful');
  console.log('- ‚úÖ Order notifications sent');
  console.log('- ‚úÖ Status updates sent');
  console.log('- ‚úÖ Rider notifications sent');
  console.log('- ‚úÖ Test messages sent');

  console.log('\nüåê Open your browser and go to:');
  console.log('- Main app: http://localhost:3000');
  console.log('- Socket test: http://localhost:3000/socket-test');
  console.log('- Notifications: http://localhost:3000/notifications');

  console.log('\nüí° Tips:');
  console.log('- Login with different user roles to see different notifications');
  console.log('- Check the notification icon in the header');
  console.log('- Click on notifications to see the dropdown menu');
  console.log('- Visit /notifications page to see all notifications');

  // Keep connections alive for a bit longer
  setTimeout(() => {
    customerSocket.disconnect();
    restaurantSocket.disconnect();
    riderSocket.disconnect();
    console.log('\nüëã Disconnected all test connections');
    process.exit(0);
  }, 5000);
}

// Error handlers
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error.message);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Run the test
testNotificationSystem().catch(console.error); 